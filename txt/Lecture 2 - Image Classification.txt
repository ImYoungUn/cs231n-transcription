Lecture 2 - Image Classification

Okay, so welcome to lecture two of CS231N. 00:06
On Tuesday we, just recall, we, sort of, gave you the big picture view of what is computer vision, what is the history, and a little bit of the overview of the class. 00:10
And today, we're really going to dive in, for the first time, into the details. 00:18
And we'll start to see, in much more depth, exactly how some of these learning algorithms actually work in practice. 00:21
So, the first lecture of the class is probably, sort of, the largest big picture vision. 00:27
And the majority of the lectures in this class will be much more detail orientated, much more focused on the specific mechanics, of these different algorithms. 00:31
So, today we'll see our first learning algorithm and that'll be really exciting, I think. 00:39
But, before we get to that, I wanted to talk about a couple of administrative issues. 00:43
One, is Piazza. 00:47
So, I saw it when I checked yesterday, it seemed like we had maybe 500 students signed up on Piazza. 00:49
Which means that there are several hundred of you who are not yet there. 00:55
So, we really want Piazza to be the main source of communication between the students and the core staff. 00:58
So, we've gotten a lot of questions to the staff list about project ideas or questions about midterm attendance or poster session attendance. 01:04
And, any, sort of, questions like that should really go to Piazza. 01:12
You'll probably get answers to your questions faster on Piazza, because all the TAs are knowing to check that. 01:16
And it's, sort of, easy for emails to get lost in the shuffle if you just send to the course list. 01:21
It's also come to my attention that some SCPD students are having a bit of a hard time signing up for Piazza. 01:26
SCPD students are supposed to receive a @stanford.edu email address. 01:33
So, once you get that email address, then you can use the Stanford email to sign into Piazza. 01:38
Probably that doesn't affect those of you who are sitting in the room right now, but, for those students listening on SCPD. 01:44
The next administrative issue is about assignment one. 01:52
Assignment one will be up later today, probably sometime this afternoon, but I promise, before I go to sleep tonight, it'll be up. 01:55
But, if you're getting a little bit antsy and really want to start working on it right now, then you can look at last year's version of assignment one. 02:03
It'll be pretty much the same content. 02:10
We're just reshuffling it a little bit to make it, like, for example, upgrading to work with Python 3, rather than Python 2.7. 02:12
And some of these minor cosmetic changes, but the content of the assignment will still be the same as last year. 02:19
So, in this assignment you'll be implementing your own k-nearest neighbor classifier, which we're going to talk about in this lecture. 02:24
You'll also implement several different linear classifiers, including the SVM and Softmax, as well as a simple two-layer neural network. 02:30
And we'll cover all this content over the next couple of lectures. 02:37
So, all of our assignments are using Python and NumPy. 02:43
If you aren't familiar with Python or NumPy, then we have written a tutorial that you can find on the course website to try and get you up to speed. 02:46
But, this is, actually, pretty important. 02:54
NumPy lets you write these very efficient vectorized operations that let you do quite a lot of computation in just a couple lines of code. 02:56
So this is super important for pretty much all aspects of numerical computing and machine learning and everything like that, is efficiently implementing these vectorized operations. 03:03
And you'll get a lot of practice with this on the first assignment. 03:13
So, for those of you who don't have a lot of experience with Matlab or NumPy or other types of vectorized tensor computation, I recommend that you start looking at this assignment pretty early and also, read carefully through the tutorial. 03:16
The other thing I wanted to talk about is that we're happy to announce that we're officially supported through Google Cloud for this class. 03:32
So, Google Cloud is somewhat similar to Amazon AWS. 03:40
You can go and start virtual machines up in the cloud. 03:43
These virtual machines can have GPUs. 03:46
We're working on the tutorial for exactly how to use Google Cloud and get it to work for the assignments. 03:50
But our intention is that you'll be able to just download some image, and it'll be very seamless for you to work on the assignments on one of these instances on the cloud. 03:55
And because Google has, very generously, supported this course, we'll be able to distribute to each of you coupons that let you use Google Cloud credits for free for the class. 04:04
So you can feel free to use these for the assignments and also for the course projects when you want to start using GPUs and larger machines and whatnot. 04:15
So, we'll post more details about that, probably, on Piazza later today. 04:24
But, I just wanted to mention, because I know there had been a couple of questions about, can I use my laptop? 04:28
Do I have to run on corn? 04:33
Do I have to, whatever? 04:34
And the answer is that, you'll be able to run on Google Cloud and we'll provide you some coupons for that. 04:35
Yeah, so, those are, kind of, the major administrative issues I wanted to talk about today. 04:43
And then, let's dive into the content. 04:49
So, the last lecture we talked a little bit about this task of image classification, which is really a core task in computer vision. 04:53
And this is something that we'll really focus on throughout the course of the class. 05:00
Is, exactly, how do we work on this image classification task? 05:04
So, a little bit more concretely, when you're doing image classification, your system receives some input image, which is this cute cat in this example, and the system is aware of some predetermined set of categories or labels. 05:07
So, these might be, like, a dog or a cat or a truck or a plane, and there's some fixed set of category labels, and the job of the computer is to look at the picture and assign it one of these fixed category labels. 05:22
This seems like a really easy problem, because so much of your own visual system in your brain is hardwired to doing these, sort of, visual recognition tasks. 05:34
But this is actually a really, really hard problem for a machine. 05:44
So, if you dig in and think about, actually, what does a computer see when it looks at this image, it definitely doesn't get this holistic idea of a cat that you see when you look at it. 05:48
And the computer really is representing the image as this gigantic grid of numbers. 05:57
So, the image might be something like 800 by 600 pixels. 06:01
And each pixel is represented by three numbers, giving the red, green, and blue values for that pixel. 06:07
So, to the computer, this is just a gigantic grid of numbers. 06:13
And it's very difficult to distill the cat-ness out of this, like, giant array of thousands, or whatever, very many different numbers. 06:15
So, we refer to this problem as the semantic gap. 06:26
This idea of a cat, or this label of a cat, is a semantic label that we're assigning to this image, and there's this huge gap between the semantic idea of a cat and these pixel values that the computer is actually seeing. 06:30
And this is a really hard problem because you can change the picture in very small, subtle ways that will cause this pixel grid to change entirely. 06:42
So, for example, if we took this same cat, and if the cat happened to sit still and not even twitch, not move a muscle, which is never going to happen, but we moved the camera to the other side, then every single grid, every single pixel, in this giant grid of numbers would be completely different. 06:51
But, somehow, it's still representing the same cat. 07:06
And our algorithms need to be robust to this. 07:09
But, not only viewpoint is one problem, another is illumination. 07:12
There can be different lighting conditions going on in the scene. 07:16
Whether the cat is appearing in this very dark, moody scene, or like is this very bright, sunlit scene, it's still a cat, and our algorithms need to be robust to that. 07:19
Objects can also deform. 07:28
I think cats are, maybe, among the more deformable of animals that you might see out there. 07:30
And cats can really assume a lot of different, varied poses and positions. 07:34
And our algorithms should be robust to these different kinds of transforms. 07:38
There can also be problems of occlusion, where you might only see part of a cat, like, just the face, or in this extreme example, just a tail peeking out from under the couch cushion. 07:43
But, in these cases, it's pretty easy for you, as a person, to realize that this is probably a cat, and you still recognize these images as cats. 07:53
And this is something that our algorithms also must be robust to, which is quite difficult, I think. 08:01
There can also be problems of background clutter, where maybe the foreground object of the cat, could actually look quite similar in appearance to the background. 08:08
And this is another thing that we need to handle. 08:16
There's also this problem of intraclass variation, that this one notion of cat-ness, actually spans a lot of different visual appearances. 08:20
And cats can come in different shapes and sizes and colors and ages. 08:28
And our algorithm, again, needs to work and handle all these different variations. 08:32
So, this is actually a really, really challenging problem. 08:36
And it's sort of easy to forget how easy this is because so much of your brain is specifically tuned for dealing with these things. 08:40
But now if we want our computer programs to deal with all of these problems, all simultaneously, and not just for cats, by the way, but for just about any object category you can imagine, this is a fantastically challenging problem. 08:47
And it's, actually, somewhat miraculous that this works at all, in my opinion. 08:59
But, actually, not only does it work, but these things work very close to human accuracy in some limited situations. 09:03
And take only hundreds of milliseconds to do so. 09:09
So, this is some pretty amazing, incredible technology, in my opinion, and over the course of the rest of the class we will really see what kinds of advancements have made this possible. 09:12
So now, if you, kind of, think about what is the API for writing an image classifier, you might sit down and try to write a method in Python like this. 09:23
Where you want to take in an image and then do some crazy magic and then, eventually, spit out this class label to say cat or dog or whatnot. 09:31
And there's really no obvious way to do this, right? 09:38
If you're taking an algorithms class and your task is to sort numbers or compute a convex hull or, even, do something like RSA encryption, you, sort of, can write down an algorithm and enumerate all the steps that need to happen in order for this things to work. 09:41
But, when we're trying to recognize objects, or recognize cats or images, there's no really clear, explicit algorithm that makes intuitive sense, for how you might go about recognizing these objects. 09:55
So, this is, again, quite challenging, if you think about, if it was your first day programming and you had to sit down and write this function, I think most people would be in trouble. 10:07
That being said, people have definitely made explicit attempts to try to write, sort of, high-end coded rules for recognizing different animals. 10:18
So, we touched on this a little bit in the last lecture, but maybe one idea for cats is that, we know that cats have ears and eyes and mouths and noses. 10:27
And we know that edges, from Hubel and Wiesel, we know that edges are pretty important when it comes to visual recognition. 10:35
So one thing we might try to do is compute the edges of this image and then go in and try to categorize all the different corners and boundaries, and say that, if we have maybe three lines meeting this way, then it might be a corner, and an ear has one corner here and one corner there and one corner there, and then, kind of, write down this explicit set of rules for recognizing cats. 10:41
But this turns out not to work very well. 11:01
One, it's super brittle. 11:04
And, two, say, if you want to start over for another object category, and maybe not worry about cats, but talk about trucks or dogs or fishes or something else, then you need to start all over again. 11:06
So, this is really not a very scalable approach. 11:17
We want to come up with some algorithm, or some method, for these recognition tasks which scales much more naturally to all the variety of objects in the world. 11:19
So, the insight that, sort of, makes this all work is this idea of the data-driven approach. 11:31
Rather than sitting down and writing these hand-specified rules to try to craft exactly what is a cat or a fish or what have you, instead, we'll go out onto the internet and collect a large dataset of many, many cats and many, many airplanes and many, many deer and different things like this. 11:38
And we can actually use tools like Google Image Search, or something like that, to go out and collect a very large number of examples of these different categories. 11:55
By the way, this actually takes quite a lot of effort to go out and actually collect these datasets but, luckily, there's a lot of really good, high quality datasets out there already for you to use. 12:03
Then once we get this dataset, we train this machine learning classifier that is going to ingest all of the data, summarize it in some way, and then spit out a model that summarizes the knowledge of how to recognize these different object categories. 12:14
Then finally, we'll use this training model and apply it on new images that will then be able to recognize cats and dogs and whatnot. 12:28
So here our API has changed a little bit. 12:35
Rather than a single function that just inputs an image and recognizes a cat, we have these two functions. 12:38
One, called, train, that's going to input images and labels and then output a model, and then, separately, another function called, predict, which will input the model and than make predictions for images. 12:43
And this is, kind of, the key insight that allowed all these things to start working really well over the last 10, 20 years or so. 12:55
So, this class is primarily about neural networks and convolutional neural networks and deep learning and all that, but this idea of a data-driven approach is much more general than just deep learning. 13:05
And I think it's useful to, sort of, step through this process for a very simple classifier first, before we get to these big, complex ones. 13:15
So, probably, the simplest classifier you can imagine is something we call nearest neighbor. 13:23
The algorithm is pretty dumb, honestly. 13:28
So, during the training step we won't do anything, we'll just memorize all of the training data. 13:31
So this is very simple. 13:36
And now, during the prediction step, we're going to take some new image and go and try to find the most similar image in the training data to that new image, and now predict the label of that most similar image. 13:39
A very simple algorithm. 13:51
But it, sort of, has a lot of these nice properties with respect to data-drivenness and whatnot. 13:53
So, to be a little bit more concrete, you might imagine working on this dataset called CIFAR-10, which is very commonly used in machine learning, as kind of a small test case. 13:59
And you'll be working with this dataset on your homework. 14:09
So, the CIFAR-10 dataset gives you 10 different classes, airplanes and automobiles and birds and cats and different things like that. 14:11
And for each of those 10 categories it provides 50,000 training images, roughly evenly distributed across these 10 categories. 14:19
And then 10,000 additional testing images that you're supposed to test your algorithm on. 14:30
So here's an example of applying this simple nearest neighbor classifier to some of these test images on CIFAR-10. 14:38
So, on this grid on the right, for the left most column, gives a test image in the CIFAR-10 dataset. 14:45
And now on the right, we've sorted the training images and show the most similar training images to each of these test examples. 14:53
And you can see that they look kind of visually similar to the training images, although they are not always correct, right? 15:03
So, maybe on the second row, we see that the testing, this is kind of hard to see, because these images are 32 by 32 pixels, you need to really dive in there and try to make your best guess. 15:10
But, this image is a dog and it's nearest neighbor is also a dog, but this next one, I think is actually a deer or a horse or something else. 15:21
But, you can see that it looks quite visually similar, because there's kind of a white blob in the middle and whatnot. 15:30
So, if we're applying the nearest neighbor algorithm to this image, we'll find the closest example in the training set. 15:36
And now, the closest example, we know it's label, because it comes from the training set. 15:42
And now, we'll simply say that this testing image is also a dog. 15:47
You can see from these examples that is probably not going to work very well, but it's still kind of a nice example to work through. 15:50
But then, one detail that we need to know is, given a pair of images, how can we actually compare them? 16:00
Because, if we're going to take our test image and compare it to all the training images, we actually have many different choices for exactly what that comparison function should look like. 16:06
So, in the example in the previous slide, we've used what's called the L1 distance, also sometimes called the Manhattan distance. 16:15
So, this is a really sort of simple, easy idea for comparing images. 16:22
And that's that we're going to just compare individual pixels in these images. 16:27
So, supposing that our test image is maybe just a tiny four by four image of pixel values, then we're take this upper-left hand pixel of the test image, subtract off the value in the training image, take the absolute value, and get the difference in that pixel between the two images. 16:32
And then, sum all these up across all the pixels in the image. 16:49
So, this is kind of a stupid way to compare images, but it does some reasonable things sometimes. 16:51
But, this gives us a very concrete way to measure the difference between two images. 16:57
And in this case, we have this difference of 456 between these two images. 17:01
So, here's some full Python code for implementing this nearest neighbor classifier and you can see it's pretty short and pretty concise because we've made use of many of these vectorized operations offered by NumPy. 17:08
So, here we can see that this training function, that we talked about earlier, is, again, very simple, in the case of nearest neighbor, you just memorize the training data, there's not really much to do here. 17:21
And now, at test time, we're going to take in our image and then go in and compare using this L1 distance function, our test image to each of these training examples and find the most similar example in the training set. 17:33
And you can see that, we're actually able to do this in just one or two lines of Python code by utilizing these vectorized operations in NumPy. 17:45
So, this is something that you'll get practice with on the first assignment. 17:53
So now, a couple questions about this simple classifier. 17:58
First, if we have N examples in our training set, then how fast can we expect training and testing to be? 18:02
Well, training is probably constant because we don't really need to do anything, we just need to memorize the data. 18:12
And if you're just copying a pointer, that's going to be constant time no matter how big your dataset is. 18:17
But now, at test time we need to do this comparison stop and compare our test image to each of the N training examples in the dataset. 18:22
And this is actually quite slow. 18:31
So, this is actually somewhat backwards, if you think about it. 18:34
Because, in practice, we want our classifiers to be slow at training time and then fast at testing time. 18:38
Because, you might imagine, that a classifier might go and be trained in a data center somewhere and you can afford to spend a lot of computation at training time to make the classifier really good. 18:45
But then, when you go and deploy the classifier at test time, you want it to run on your mobile phone or in a browser or some other low power device, and you really want the testing time performance of your classifier to be quite fast. 18:54
So, from this perspective, this nearest neighbor algorithm, is, actually, a little bit backwards. 19:07
And we'll see that once we move to convolutional neural networks, and other types of parametric models, they'll be the reverse of this. 19:11
Where you'll spend a lot of compute at training time, but then they'll be quite fast at testing time. 19:18
So then, the question is, what exactly does this nearest neighbor algorithm look like when you apply it in practice? 19:24
So, here we've drawn, what we call the decision regions of a nearest neighbor classifier. 19:30
So, here our training set consists of these points in the two dimensional plane, where the color of the point represents the category, or the class label, of that point. 19:36
So, here we see we have five classes and some blue ones up in the corner here, some purple ones in the upper-right hand corner. 19:47
And now for each pixel in this entire plane, we've gone and computed what is the nearest example in these training data, and then colored the point of the background corresponding to what is the class label. 19:53
So, you can see that this nearest neighbor classifier is just sort of carving up the space and coloring the space according to the nearby points. 20:06
But this classifier is maybe not so great. 20:14
And by looking at this picture we can start to see some of the problems that might come out with a nearest neighbor classifier. 20:18
For one, this central region actually contains mostly green points, but one little yellow point in the middle. 20:24
But because we're just looking at the nearest neighbor, this causes a little yellow island to appear in this middle of this green cluster. 20:31
And that's, maybe, not so great. 20:38
Maybe those points actually should have been green. 20:40
And then, similarly we also see these, sort of, fingers, like the green region pushing into the blue region, again, due to the presence of one point, which may have been noisy or spurious. 20:44
So, this kind of motivates a slight generalization of this algorithm called k-nearest neighbors. 20:55
So rather than just looking for the single nearest neighbor, instead we'll do something a little bit fancier and find K of our nearest neighbors, according to our distance metric, and then take a vote among each of our neighbors. 21:01
And then predict the majority vote among our neighbors. 21:15
You can imagine slightly more complex ways of doing this. 21:18
Maybe you'd vote weighted on the distance, or something like that, but the simplest thing that tends to work pretty well is just taking a majority vote. 21:21
So here we've shown the exact same set of points using this K=1 nearest neighbor classifier, as well as K=3 and K=5 in the middle and on the right. 21:29
And once we move to K=3, you can see that that spurious yellow point in the middle of the green cluster is no longer causing the points near that region to be classified as yellow. 21:39
Now this entire green portion in the middle is all being classified as green. 21:50
You can also see that these fingers of the red and blue regions are starting to get smoothed out due to this majority voting. 21:55
And then, once we move to the K=5 case, then these decision boundaries between the blue and red regions have become quite smooth and quite nice. 22:02
So, generally when you're using nearest neighbors classifiers, you almost always want to use some value of K, which is larger than one because this tends to smooth out your decision boundaries and lead to better results. 22:12
Question? 22:29
[student asking a question] Yes, so the question is, what is the deal with these white regions? 22:30
The white regions are where there was no majority among the k-nearest neighbors. 22:38
You could imagine maybe doing something slightly fancier and maybe taking a guess or randomly selecting among the majority winners, but for this simple example we're just coloring it white to indicate there was no nearest neighbor in those points. 22:43
Whenever we're thinking about computer vision I think it's really useful to kind of flip back and forth between several different viewpoints. 23:00
One, is this idea of high dimensional points in the plane, and then the other is actually looking at concrete images. 23:06
Because the pixels of the image actually allow us to think of these images as high dimensional vectors. 23:13
And it's sort of useful to ping pong back and forth between these two different viewpoints. 23:19
So then, sort of taking this k-nearest neighbor and going back to the images you can see that it's actually not very good. 23:23
Here I've colored in red and green which images would actually be classified correctly or incorrectly according to their nearest neighbor. 23:29
And you can see that it's really not very good. 23:35
But maybe if we used a larger value of K then this would involve actually voting among maybe the top three or the top five or maybe even the whole row. 23:38
And you could imagine that that would end up being a lot more robust to some of this noise that we see when retrieving neighbors in this way. 23:47
So another choice we have when we're working with the k-nearest neighbor algorithm is determining exactly how we should be comparing our different points. 23:57
For the examples so far we've just shown we've talked about this L1 distance which takes the sum of the absolute values between the pixels. 24:05
But another common choice is the L2 or Euclidean distance where you take the square root of the sum of the squares and take this as your distance. 24:15
Choosing different distance metrics actually is a pretty interesting topic because different distance metrics make different assumptions about the underlying geometry or topology that you'd expect in the space. 24:24
So, this L1 distance, underneath this, this is actually a circle according to the L1 distance and it forms this square shape thing around the origin. 24:35
Where each of the points on this, on the square, is equidistant from the origin according to L1, whereas with the L2 or Euclidean distance then this circle is a familiar circle, it looks like what you'd expect. 24:45
So one interesting thing to point out between these two metrics in particular, is that the L1 distance depends on your choice of coordinates system. 24:57
So if you were to rotate the coordinate frame that would actually change the L1 distance between the points. 25:05
Whereas changing the coordinate frame in the L2 distance doesn't matter, it's the same thing no matter what your coordinate frame is. 25:10
Maybe if your input features, if the individual entries in your vector have some important meaning for your task, then maybe somehow L1 might be a more natural fit. 25:18
But if it's just a generic vector in some space and you don't know which of the different elements, you don't know what they actually mean, then maybe L2 is slightly more natural. 25:27
And another point here is that by using different distance metrics we can actually generalize the k-nearest neighbor classifier to many, many different types of data, not just vectors, not just images. 25:37
So, for example, imagine you wanted to classify pieces of text, then the only thing you need to do to use k-nearest neighbors is to specify some distance function that can measure distances between maybe two paragraphs or two sentences or something like that. 25:48
So, simply by specifying different distance metrics we can actually apply this algorithm very generally to basically any type of data. 26:03
Even though it's a kind of simple algorithm, in general, it's a very good thing to try first when you're looking at a new problem. 26:12
So then, it's also kind of interesting to think about what is actually happening geometrically if we choose different distance metrics. 26:21
So here we see the same set of points on the left using the L1, or Manhattan distance, and then, on the right, using the familiar L2, or Euclidean distance. 26:28
And you can see that the shapes of these decision boundaries actually change quite a bit between the two metrics. 26:38
So when you're looking at L1 these decision boundaries tend to follow the coordinate axes. 26:44
And this is again because the L1 depends on our choice of coordinate system. 26:49
Where the L2 sort of doesn't really care about the coordinate axis, it just puts the boundaries where they should fall naturally. 26:53
My confession is that each of these examples that I've shown you is actually from this interactive web demo that I built, where you can go and play with this k-nearest neighbor classifier on your own. 27:04
And this is really hard to work on a projector screen. 27:14
So maybe we'll do that on your own time. 27:17
So, let's just go back to here. 27:26
Man, this is kind of embarrassing. 27:32
Okay, that was way more trouble than it was worth. 28:07
So, let's skip this, but I encourage you to go play with this in your browser. 28:09
It's actually pretty fun and kind of nice to build intuition about how the decision boundary changes as you change the K and change your distance metric and all those sorts of things. 28:13
Okay, so then the question is once you're actually trying to use this algorithm in practice, there's several choices you need to make. 28:30
We talked about choosing different values of K. 28:37
We talked about choosing different distance metrics. 28:39
And the question becomes how do you actually make these choices for your problem and for your data? 28:41
So, these choices, of things like K and the distance metric, we call hyperparameters, because they are not necessarily learned from the training data, instead these are choices about your algorithm that you make ahead of time and there's no way to learn them directly from the data. 28:47
So, the question is how do you set these things in practice? 29:05
And they turn out to be very problem-dependent. 29:10
And the simple thing that most people do is simply try different values of hyperparameters for your data and for your problem, and figure out which one works best. 29:12
There's a question? 29:20
[student asking a question] So, the question is, where L1 distance might be preferable to using L2 distance? 29:22
I think it's mainly problem-dependent, it's sort of difficult to say in which cases you think one might be better than the other. 29:34
but I think that because L1 has this sort of coordinate dependency, it actually depends on the coordinate system of your data, if you know that you have a vector, and maybe the individual elements of the vector have meaning. 29:41
Like maybe you're classifying employees for some reason and then the different elements of that vector correspond to different features or aspects of an employee. 29:55
Like their salary or the number of years they've been working at the company or something like that. 30:03
So I think when your individual elements actually have some meaning, is where I think maybe using L1 might make a little bit more sense. 30:08
But in general, again, this is a hyperparameter and it really depends on your problem and your data so the best answer is just to try them both and see what works better. 30:15
Even this idea of trying out different values of hyperparameters and seeing what works best, there are many different choices here. 30:28
What exactly does it mean to try hyperparameters and see what works best? 30:34
Well, the first idea you might think of is simply choosing the hyperparameters that give you the best accuracy or best performance on your training data. 30:38
This is actually a really terrible idea. 30:47
You should never do this. 30:49
In the concrete case of the nearest neighbor classifier, for example, if we set K=1, we will always classify the training data perfectly. 30:52
So if we use this strategy we'll always pick K=1, but, as we saw from the examples earlier, in practice it seems that setting K equals to larger values might cause us to misclassify some of the training data, but, in fact, lead to better performance on points that were not in the training data. 31:01
And ultimately in machine learning we don't care about fitting the training data, we really care about how our classifier, or how our method, will perform on unseen data after training. 31:17
So, this is a terrible idea, don't do this. 31:27
So, another idea that you might think of, is maybe we'll take our full dataset and we'll split it into some training data and some test data. 31:30
And now I'll try training my algorithm with different choices of hyperparameters on the training data and then I'll go and apply that trained classifier on the test data and now I will pick the set of hyperparameters that cause me to perform best on the test data. 31:38
This seems like maybe a more reasonable strategy, but, in fact, this is also a terrible idea and you should never do this. 31:54
Because, again, the point of machine learning systems is that we want to know how our algorithm will perform. 32:01
So, the point of the test set is to give us some estimate of how our method will do on unseen data that's coming out from the wild. 32:06
And if we use this strategy of training many different algorithms with different hyperparameters, and then, selecting the one which does the best on the test data, then, it's possible, that we may have just picked the right set of hyperparameters that caused our algorithm to work quite well on this testing set, but now our performance on this test set will no longer be representative of our performance of new, unseen data. 32:14
So, again, you should not do this, this is a bad idea, you'll get in trouble if you do this. 32:38
What is much more common, is to actually split your data into three different sets. 32:44
You'll partition most of your data into a training set and then you'll create a validation set and a test set. 32:50
And now what we typically do is go and train our algorithm with many different choices of hyperparameters on the training set, evaluate on the validation set, and now pick the set of hyperparameters which performs best on the validation set. 32:57
And now, after you've done all your development, you've done all your debugging, after you've dome everything, then you'd take that best performing classifier on the validation set and run it once on the test set. 33:11
And now that's the number that goes into your paper, that's the number that goes into your report, that's the number that actually is telling you how your algorithm is doing on unseen data. 33:23
And this is actually really, really important that you keep a very strict separation between the validation data and the test data. 33:32
So, for example, when we're working on research papers, we typically only touch the test set at the very last minute. 33:38
So, when I'm writing papers, I tend to only touch the test set for my problem in maybe the week before the deadline or so to really insure that we're not being dishonest here and we're not reporting a number which is unfair. 33:45
So, this is actually super important and you want to make sure to keep your test data quite under control. 33:57
So another strategy for setting hyperparameters is called cross validation. 34:06
And this is used a little bit more commonly for small data sets, not used so much in deep learning. 34:10
So here the idea is we're going to take our test data, or we're going to take our dataset, as usual, hold out some test set to use at the very end, and now, for the rest of the data, rather than splitting it into a single training and validation partition, instead, we can split our training data into many different folds. 34:17
And now, in this way, we've cycled through choosing which fold is going to be the validation set. 34:35
So now, in this example, we're using five fold cross validation, so you would train your algorithm with one set of hyperparameters on the first four folds, evaluate the performance on fold four, and now go and retrain your algorithm on folds one, two, three, and five, evaluate on fold four, and cycle through all the different folds. 34:41
And, when you do it this way, you get much higher confidence about which hyperparameters are going to perform more robustly. 35:00
So this is kind of the gold standard to use, but, in practice in deep learning when we're training large models and training is very computationally expensive, these doesn't get used too much in practice. 35:07
Question? 35:18
[student asking a question] Yeah, so the question is, a little bit more concretely, what's the difference between the training and the validation set? 35:19
So, if you think about the k-nearest neighbor classifier then the training set is this set of images with labels where we memorize the labels. 35:35
And now, to classify an image, we're going to take the image and compare it to each element in the training data, and then transfer the label from the nearest training point. 35:46
So now our algorithm will memorize everything in the training set, and now we'll take each element of the validation set and compare it to each element in the training data and then use this to determine what is the accuracy of our classifier when it's applied on the validation set. 36:00
So this is the distinction between training and validation. 36:16
Where your algorithm is able to see the labels of the training set, but for the validation set, your algorithm doesn't have direct access to the labels. 36:19
We only use the labels of the validation set to check how well our algorithm is doing. 36:28
A question? 36:34
[student asking a question] The question is, whether the test set, is it possible that the test set might not be representative of data out there in the wild? 36:34
This definitely can be a problem in practice, the underlying statistical assumption here is that your data are all independently and identically distributed, so that all of your data points should be drawn from the same underlying probability distribution. 36:52
Of course, in practice, this might not always be the case, and you definitely can run into cases where the test set might not be super representative of what you see in the wild. 37:10
So this is kind of a problem that dataset creators and dataset curators need to think about. 37:20
But when I'm creating datasets, for example, one thing I do, is I'll go and collect a whole bunch of data all at once, using the exact same methodology for collecting the data, and then afterwards you go and partition it randomly between train and test. 37:25
One thing that can screw you up here is maybe if you're collecting data over time and you make the earlier data, that you collect first, be the training data, and the later data that you collect be the test data, then you actually might run into this shift that could cause problems. 37:38
But as long as this partition is random among your entire set of data points, then that's how we try to alleviate this problem in practice. 37:51
So then, once you've gone through this cross validation procedure, then you end up with graphs that look something like this. 38:04
So here, on the X axis, we are showing the value of K for a k-nearest neighbor classifier on some problem, and now on the Y axis, we are showing what is the accuracy of our classifier on some dataset for different values of K. 38:11
And you can see that, in this case, we've done five fold cross validation over the data, so, for each value of K we have five different examples of how well this algorithm is doing. 38:26
And, actually, going back to the question about having some test sets that are better or worse for your algorithm, using K fold cross validation is maybe one way to help quantify that a little bit. 38:38
And, in that, we can see the variance of how this algorithm performs on different of the validation folds. 38:50
And that gives you some sense of, not just what is the best, but, also, what is the distribution of that performance. 38:57
So, whenever you're training machine learning models you end up making plots like this, where they show you what is your accuracy, or your performance as a function of your hyperparameters, and then you want to go and pick the model, or the set of hyperparameters, at the end of the day, that performs the best on the validation set. 39:04
So, here we see that maybe about K=7 probably works about best for this problem. 39:19
So, k-nearest neighbor classifiers on images are actually almost never used in practice. 39:29
Because, with all of these problems that we've talked about. 39:34
So, one problem is that it's very slow at test time, which is the reverse of what we want, which we talked about earlier. 39:38
Another problem is that these things like Euclidean distance, or L1 distance, are really not a very good way to measure distances between images. 39:44
These, sort of, vectorial distance functions do not correspond very well to perceptual similarity between images. 39:54
How you perceive differences between images. 40:01
So, in this example, we've constructed, there's this image on the left of a girl, and then three different distorted images on the right where we've blocked out her mouth, we've actually shifted down by a couple pixels, or tinted the entire image blue. 40:04
And, actually, if you compute the Euclidean distance between the original and the boxed, the original and the shuffled, and original in the tinted, they all have the same L2 distance. 40:18
Which is, maybe, not so good because it sort of gives you the sense that the L2 distance is really not doing a very good job at capturing these perceptional distances between images. 40:27
Another, sort of, problem with the k-nearest neighbor classifier has to do with something we call the curse of dimensionality. 40:40
So, if you recall back this viewpoint we had of the k-nearest neighbor classifier, it's sort of dropping paint around each of the training data points and using that to sort of partition the space. 40:46
So that means that if we expect the k-nearest neighbor classifier to work well, we kind of need our training examples to cover the space quite densely. 40:57
Otherwise our nearest neighbors could actually be quite far away and might not actually be very similar to our testing points. 41:05
And the problem is, that actually densely covering the space, means that we need a number of training examples, which is exponential in the dimension of the problem. 41:16
So this is very bad, exponential growth is always bad, basically, you're never going to get enough images to densely cover this space of pixels in this high dimensional space. 41:24
So that's maybe another thing to keep in mind when you're thinking about using k-nearest neighbor. 41:35
So, kind of the summary is that we're using k-nearest neighbor to introduce this idea of image classification. 41:41
We have a training set of images and labels and then we use that to predict these labels on the test set. 41:45
Question? 41:51
[student asking a question] Oh, sorry, the question is, what was going on with this picture? 41:52
What are the green and the blue dots? 41:57
So here, we have some training samples which are represented by points, and the color of the dot maybe represents the category of the point, of this training sample. 41:59
So, if we're in one dimension, then you maybe only need four training samples to densely cover the space, but if we move to two dimensions, then, we now need, four times four is 16 training examples to densely cover this space. 42:11
And if we move to three, four, five, many more dimensions, the number of training examples that we need to densely cover the space, grows exponentially with the dimension. 42:25
So, this is kind of giving you the sense, that maybe in two dimensions we might have this kind of funny curved shape, or you might have sort of arbitrary manifolds of labels in different dimensional spaces. 42:35
Because the k-nearest neighbor algorithm doesn't really make any assumptions about these underlying manifolds, the only way it can perform properly is if it has quite a dense sample of training points to work with. 42:47
So, this is kind of the overview of k-nearest neighbors and you'll get a chance to actually implement this and try it out on images in the first assignment. 43:01
So, if there's any last minute questions about K and N, I'm going to move on to the next topic. 43:11
Question? 43:16
[student is asking a question] Sorry, say that again. 43:16
[student is asking a question] Yeah, so the question is, why do these images have the same L2 distance? 43:22
And the answer is that, I carefully constructed them to have the same L2 distance. 43:32
[laughing] But it's just giving you the sense that the L2 distance is not a very good measure of similarity between images. 43:35
And these images are actually all different from each other in quite disparate ways. 43:45
If you're using K and N, then the only thing you have to measure distance between images, is this single distance metric. 43:52
And this kind of gives you an example where that distance metric is actually not capturing the full description of distance or difference between images. 44:00
So, if this case, I just sort of carefully constructed these translations and these offsets to match exactly. 44:08
Question? 44:15
[student asking a question] So, the question is, maybe this is actually good, because all of these things are actually having the same distance to the image. 44:16
That's maybe true for this example, but I think you could also construct examples where maybe we have two original images and then by putting the boxes in the right places or tinting them, we could cause it to be nearer to pretty much anything that you want, right? 44:36
Because in this example, we can kind of like do arbitrary shifting and tinting to kind of change these distances nearly arbitrarily without changing the perceptional nature of these images. 44:48
So, I think that this can actually screw you up if you have many different original images. 44:57
Question? 45:03
[student is asking a question] The question is, whether or not it's common in real-world cases to go back and retrain the entire dataset once you've found those best hyperparameters? 45:04
So, people do sometimes do this in practice, but it's somewhat a matter of taste. 45:24
If you're really rushing for that deadline and you've really got to get this model out the door then, if it takes a long time to retrain the model on the whole dataset, then maybe you won't do it. 45:30
But if you have a little bit more time to spare and a little bit more compute to spare, and you want to squeeze out that maybe that extra 1% of performance, then that is a trick you can use. 45:39
So we kind of saw that the k-nearest neighbor has a lot of the nice properties of machine learning algorithms, but in practice it's not so great, and really not used very much in images. 45:53
So the next thing I'd like to talk about is linear classification. 46:05
And linear classification is, again, quite a simple learning algorithm, but this will become super important and help us build up to whole neural networks and whole convolutional networks. 46:08
So, one analogy people often talk about when working with neural networks is we think of them as being kind of like Lego blocks. 46:19
That you can have different kinds of components of neural networks and you can stick these components together to build these large different towers of convolutional networks. 46:26
One of the most basic building blocks that we'll see in different types of deep learning applications is this linear classifier. 46:36
So, I think it's actually really important to have a good understanding of what's happening with linear classification. 46:43
Because these will end up generalizing quite nicely to whole neural networks. 46:48
So another example of kind of this modular nature of neural networks comes from some research in our own lab on image captioning, just as a little bit of a preview. 46:52
So here the setup is that we want to input an image and then output a descriptive sentence describing the image. 47:00
And the way this kind of works is that we have one convolutional neural network that's looking at the image, and a recurrent neural network that knows about language. 47:06
And we can kind of just stick these two pieces together like Lego blocks and train the whole thing together and end up with a pretty cool system that can do some non-trivial things. 47:14
And we'll work through the details of this model as we go forward in the class, but this just gives you the sense that, these deep neural networks are kind of like Legos and this linear classifier is kind of like the most basic building blocks of these giant networks. 47:22
But that's a little bit too exciting for lecture two, so we have to go back to CIFAR-10 for the moment. 47:37
[laughing] So, recall that CIFAR-10 has these 50,000 training examples, each image is 32 by 32 pixels and three color channels. 47:41
In linear classification, we're going to take a bit of a different approach from k-nearest neighbor. 47:52
So, the linear classifier is one of the simplest examples of what we call a parametric model. 47:56
So now, our parametric model actually has two different components. 48:04
It's going to take in this image, maybe, of a cat on the left, and this, that we usually write as X for our input data, and also a set of parameters, or weights, which is usually called W, also sometimes theta, depending on the literature. 48:08
And now we're going to write down some function which takes in both the data, X, and the parameters, W, and this'll spit out now 10 numbers describing what are the scores corresponding to each of those 10 categories in CIFAR-10. 48:24
With the interpretation that, like the larger score for cat, indicates a larger probability of that input X being cat. 48:39
And now, a question? 48:48
[student asking a question] Sorry, can you repeat that? 48:49
[student asking a question] Oh, so the question is what is the three? 48:56
The three, in this example, corresponds to the three color channels, red, green, and blue. 49:01
Because we typically work on color images, that's nice information that you don't want to throw away. 49:06
So, in the k-nearest neighbor setup there was no parameters, instead, we just kind of keep around the whole training data, the whole training set, and use that at test time. 49:15
But now, in a parametric approach, we're going to summarize our knowledge of the training data and stick all that knowledge into these parameters, W. 49:24
And now, at test time, we no longer need the actual training data, we can throw it away. 49:31
We only need these parameters, W, at test time. 49:35
So this allows our models to now be more efficient and actually run on maybe small devices like phones. 49:37
So, kind of, the whole story in deep learning is coming up with the right structure for this function, F. 49:44
You can imagine writing down different functional forms for how to combine weights and data in different complex ways, and these could correspond to different network architectures. 49:50
But the simplest possible example of combining these two things is just, maybe, to multiply them. 50:01
And this is a linear classifier. 50:05
So here our F of X, W is just equal to the W times X. 50:08
Probably the simplest equation you can imagine. 50:13
So here, if you kind of unpack the dimensions of these things, we recall that our image was maybe 32 by 32 by 3 values. 50:15
So then, we're going to take those values and then stretch them out into a long column vector that has 3,072 by one entries. 50:24
And now we want to end up with 10 class scores. 50:34
We want to end up with 10 numbers for this image giving us the scores for each of the 10 categories. 50:39
Which means that now our matrix, W, needs to be ten by 3072. 50:44
So that once we multiply these two things out then we'll end up with a single column vector 10 by one, giving us our 10 class scores. 50:49
Also sometimes, you'll typically see this, we'll often add a bias term which will be a constant vector of 10 elements that does not interact with the training data, and instead just gives us some sort of data independent preferences for some classes over another. 50:57
So you might imagine that if you're dataset was unbalanced and had many more cats than dogs, for example, then the bias elements corresponding to cat would be higher than the other ones. 51:12
So if you kind of think about pictorially what this function is doing, in this figure we have an example on the left of a simple image with just a two by two image, so it has four pixels total. 51:23
So the way that the linear classifier works is that we take this two by two image, we stretch it out into a column vector with four elements, and now, in this example, we are just restricting to three classes, cat, dog, and ship, because you can't fit 10 on a slide, and now our weight matrix is going to be four by three, so we have four pixels and three classes. 51:37
And now, again, we have a three element bias vector that gives us data independent bias terms for each category. 52:02
Now we see that the cat score is going to be the enter product between the pixels of our image and this row in the weight matrix added together with this bias term. 52:11
So, when you look at it this way you can kind of understand linear classification as almost a template matching approach. 52:22
Where each of the rows in this matrix correspond to some template of the image. 52:30
And now the enter product or dot product between the row of the matrix and the column giving the pixels of the image, computing this dot product kind of gives us a similarity between this template for the class and the pixels of our image. 52:35
And then bias just, again, gives you this data independence scaling offset to each of the classes. 52:50
If we think about linear classification from this viewpoint of template matching we can actually take the rows of that weight matrix and unravel them back into images and actually visualize those templates as images. 53:00
And this gives us some sense of what a linear classifier might actually be doing to try to understand our data. 53:12
So, in this example, we've gone ahead and trained a linear classifier on our images. 53:18
And now on the bottom we're visualizing what are those rows in that learned weight matrix corresponding to each of the 10 categories in CIFAR-10. 53:23
And in this way we kind of get a sense for what's going on in these images. 53:32
So, for example, in the left, on the bottom left, we see the template for the plane class, kind of consists of this like blue blob, this kind of blobby thing in the middle and maybe blue in the background, which gives you the sense that this linear classifier for plane is maybe looking for blue stuff and blobby stuff, and those features are going to cause the classifier to like planes more. 53:35
Or if we look at this car example, we kind of see that there's a red blobby thing through the middle and a blue blobby thing at the top that maybe is kind of a blurry windshield. 53:57
But this is a little bit weird, this doesn't really look like a car. 54:08
No individual car actually looks like this. 54:11
So the problem is that the linear classifier is only learning one template for each class. 54:13
So if there's sort of variations in how that class might appear, it's trying to average out all those different variations, all those different appearances, and use just one single template to recognize each of those categories. 54:18
We can also see this pretty explicitly in the horse classifier. 54:29
So in the horse classifier we see green stuff on the bottom because horses are usually on grass. 54:33
And then, if you look carefully, the horse actually seems to have maybe two heads, one head on each side. 54:37
And I've never seen a horse with two heads. 54:43
But the linear classifier is just doing the best that it can, because it's only allowed to learn one template per category. 54:45
And as we move forward into neural networks and more complex models, we'll be able to achieve much better accuracy because they no longer have this restriction of just learning a single template per category. 54:52
Another viewpoint of the linear classifier is to go back to this idea of images as points and high dimensional space. 55:09
And you can imagine that each of our images is something like a point in this high dimensional space. 55:15
And now the linear classifier is putting in these linear decision boundaries to try to draw linear separation between one category and the rest of the categories. 55:23
So maybe up on the upper-left hand side we see these training examples of airplanes and throughout the process of training the linear classier will go and try to draw this blue line to separate out with a single line the airplane class from all the rest of the classes. 55:33
And it's actually kind of fun if you watch during the training process these lines will start out randomly and then go and snap into place to try to separate the data properly. 55:49
But when you think about linear classification in this way, from this high dimensional point of view, you can start to see again what are some of the problems that might come up with linear classification. 55:58
And it's not too hard to construct examples of datasets where a linear classifier will totally fail. 56:09
So, one example, on the left here, is that, suppose we have a dataset of two categories, and these are all maybe somewhat artificial, but maybe our dataset has two categories, blue and red. 56:15
And the blue categories are the number of pixels in the image, which are greater than zero, is odd. 56:26
And anything where the number of pixels greater than zero is even, we want to classify as the red category. 56:33
So if you actually go and draw what these different decisions regions look like in the plane, you can see that our blue class with an odd number of pixels is going to be these two quadrants in the plane, and even will be the opposite two quadrants. 56:38
So now, there's no way that we can draw a single linear line to separate the blue from the red. 56:56
So this would be an example where a linear classifier would really struggle. 57:01
And this is maybe not such an artificial thing after all. 57:05
Instead of counting pixels, maybe we're actually trying to count whether the number of animals or people in an image is odd or even. 57:09
So this kind of a parity problem of separating odds from evens is something that linear classification really struggles with traditionally. 57:16
Other situations where a linear classifier really struggles are multimodal situations. 57:28
So here on the right, maybe our blue category has these three different islands of where the blue category lives, and then everything else is some other category. 57:33
So, for something like horses, we saw on the previous example, is something where this actually might be happening in practice. 57:44
Where there's maybe one island in the pixel space of horses looking to the left, and another island of horses looking to the right. 57:50
And now there's no good way to draw a single linear boundary between these two isolated islands of data. 57:57
So anytime where you have multimodal data, like one class that can appear in different regions of space, is another place where linear classifiers might struggle. 58:03
So there's kind of a lot of problems with linear classifiers, but it is a super simple algorithm, super nice and easy to interpret and easy to understand. 58:13
So you'll actually be implementing these things on your first homework assignment. 58:22
At this point, we kind of talked about what is the functional form corresponding to a linear classifier. 58:28
And we've seen that this functional form of matrix vector multiply corresponds this idea of template matching and learning a single template for each category in your data. 58:34
And then once we have this trained matrix you can use it to actually go and get your scores for any new training example. 58:44
But what we have not told you is how do you actually go about choosing the right W for your dataset. 58:55
We've just talked about what is the functional form and what is going on with this thing. 59:01
So that's something we'll really focus on next time. 59:06
And next lecture we'll talk about what are the strategies and algorithms for choosing the right W. 59:11
And this will lead us to questions of loss functions and optimization and eventually ConvNets. 59:16
So, that's a bit of the preview for next week. 59:21
And that's all we have for today. 59:25
