Lecture 14 - Deep Reinforcement Learning

Okay let's get started. 00:09
Alright, so welcome to lecture 14, and today we'll be talking about reinforcement learning. 00:13
So some administrative details first, update on grades. 00:20
Midterm grades were released last night, so see Piazza for more information and statistics about that. 00:24
And we also have A2 and milestone grades scheduled for later this week. 00:30
Also, about your projects, all teams must register your projects. 00:36
So on Piazza we have a form posted, so you should go there and this is required, every team should go and fill out this form with information about your project, that we'll use for final grading and the poster session. 00:40
And the Tiny ImageNet evaluation servers are also now online for those of you who are doing the Tiny ImageNet challenge. 00:53
We also have a link to a course survey on Piazza that was released a few days ago, so, please fill it out if you guys haven't already. 01:01
We'd love to have your feedback and know how we can improve this class. 01:09
Okay, so the topic of today, reinforcement learning. 01:16
Alright, so so far we've talked about supervised learning, which is about a type of problem where we have data x and then we have labels y and our goal is to learn a function that is mapping from x to y. 01:19
So, for example, the classification problem that we've been working with. 01:30
We also talked last lecture about unsupervised learning, which is the problem where we have just data and no labels, and our goal is to learn some underlying, hidden structure of the data. 01:35
So, an example of this is the generative models that we talked about last lecture. 01:45
And so today we're going to talk about a different kind of problem set-up, the reinforcement learning problem. 01:52
And so here we have an agent that can take actions in its environment, and it can receive rewards for for its action. 01:57
And its goal is going to be to learn how to take actions in a way that can maximize its reward. 02:04
And so we'll talk about this in a lot more detail today. 02:09
So, the outline for today, we're going to first talk about the reinforcement learning problem, and then we'll talk about Markov decision processes, which is a formalism of the reinforcement learning problem, and then we'll talk about two major classes of RL algorithms, Q-learning and policy gradients. 02:14
So, in the reinforcement learning set up, what we have is we have an agent and we have an environment. 02:32
And so the environment gives the agent a state. 02:38
In turn, the agent is going to take an action, and then the environment is going to give back a reward, as well as the next state. 02:43
And so this is going to keep going on in this loop, on and on, until the environment gives back a terminal state, which then ends the episode. 02:52
So, let's see some examples of this. 03:00
First we have here the cart-pole problem, which is a classic problem that some of you may have seen, in, for example, 229 before. 03:03
And so this objective here is that you want to balance a pole on top of a movable cart. 03:11
Alright, so the state that you have here is your current description of the system. 03:16
So, for example, angular, angular speed of your pole, your position, and the horizontal velocity of your cart. 03:20
And the actions you can take are horizontal forces that you apply onto the cart, right? 03:28
So you're basically trying to move this cart around to try and balance this pole on top of it. 03:33
And the reward that you're getting from this environment is one at each time step if your pole is upright. 03:38
So you basically want to keep this pole balanced for as long as you can. 03:43
Okay, so here's another example of a classic RL problem. 03:49
Here is robot locomotion. 03:52
So we have here an example of a humanoid robot, as well as an ant robot model. 03:53
And our objective here is to make the robot move forward. 03:59
And so the state that we have describing our system is the angle and the positions of all the joints of our robots. 04:03
And then the actions that we can take are the torques applied onto these joints, right, and so these are trying to make the robot move forward and then the reward that we get is our forward movement as well as, I think, in the time of, in the case of the humanoid, also, you can have something like a reward of one for each time step that this robot is upright. 04:10
So, games are also a big class of problems that can be formulated with RL. 04:33
So, for example, here we have Atari games which are a classic success of deep reinforcement learning and so here the objective is to complete these games with the highest possible score, right. 04:38
So, your agent is basically a player that's trying to play these games. 04:48
And the state that you have is going to be the raw pixels of the game state. 04:52
Right, so these are just the pixels on the screen that you would see as you're playing the game. 04:57
And then the actions that you have are your game controls, so for example, in some games maybe moving left to right, up or down. 05:02
And then the score that you have is your score increase or decrease at each time step, and your goal is going to be to maximize your total score over the course of the game. 05:09
And, finally, here we have another example of a game here. 05:21
It's Go, which is something that was a huge achievement of deep reinforcement learning last year, when Deep Minds AlphaGo beats Lee Sedol, which is one of the best Go players of the last few years, and this is actually in the news again for, as some of you may have seen, there's another Go competition going on now with AlphaGo versus a top-ranked Go player. 05:24
And so the objective here is to win the game, and our state is the position of all the pieces, the action is where to put the next piece down, and the reward is, one, if you win at the end of the game, and zero otherwise. 05:50
And we'll also talk about this one in a little bit more detail, later. 06:03
Okay, so how can we mathematically formalize the RL problem, right? 06:08
This loop that we talked about earlier, of environments giving agents states, and then agents taking actions. 06:13
So, a Markov decision process is the mathematical formulation of the RL problem, and an MDP satisfies the Markov property, which is that the current state completely characterizes the state of the world. 06:22
And an MDP here is defined by tuple of objects, consisting of S, which is the set of possible states. 06:36
We have A, our set of possible actions, we also have R, our distribution of our reward, given a state, action pair, so it's a function mapping from state action to your reward. 06:43
You also have P, which is a transition probability distribution over your next state, that you're going to transition to given your state, action pair. 06:55
And then finally we have a Gamma, a discount factor, which is basically saying how much we value rewards coming up soon versus later on. 07:02
So, the way the Markov Decision Process works is that at our initial time step t equals zero, the environment is going to sample some initial state as zero, from the initial state distribution, p of s zero. 07:14
And then, once it has that, then from time t equals zero until it's done, we're going to iterate through this loop where the agent is going to select an action, a sub t. 07:26
The environment is going to sample a reward from here, so reward given your state and the action that you just took. 07:35
It's also going to sample the next state, at time t plus one, given your probability distribution and then the agent is going to receive the reward, as well as the next state, and then we're going to through this process again, and keep looping; agent will select the next action, and so on until the episode is over. 07:44
Okay, so now based on this, we can define a policy pi, which is a function from your states to your actions that specifies what action to take in each state. 08:05
And this can be either deterministic or stochastic. 08:16
And our objective now is to going to be to find your optimal policy pi star, that maximizes your cumulative discounted reward. 08:19
So we can see here we have our some of our future rewards, which can be also discounted by your discount factor. 08:27
So, let's look at an example of a simple MDP. 08:35
And here we have Grid World, which is this task where we have this grid of states. 08:39
So you can be in any of these cells of your grid, which are your states. 08:44
And you can take actions from your states, and so these actions are going to be simple movements, moving to your right, to your left, up or down. 08:50
And you're going to get a negative reward for each transition or each time step, basically, that happens. 08:59
Each movement that you take, and this can be something like R equals negative one. 09:07
And so your objective is going to be to reach one of the terminal states, which are the gray states shown here, in the least number of actions. 09:11
Right, so the longer that you take to reach your terminal state, you're going to keep accumulating these negative rewards. 09:20
Okay, so if you look at a random policy here, a random policy would consist of, basically, at any given state or cell that you're in just sampling randomly which direction that you're going to move in next. 09:27
Right, so all of these have equal probability. 09:39
On the other hand, an optimal policy that we would like to have is basically taking the action, the direction that will move us closest to a terminal state. 09:41
So you can see here, if we're right next to one of the terminal states we should always move in the direction that gets us to this terminal state. 09:51
And otherwise, if you're in one of these other states, you want to take the direction that will take you closest to one of these states. 09:59
Okay, so now given this description of our MDP, what we want to do is we want to find our optimal policy pi star. 10:09
Right, our policy that's maximizing the sum of the rewards. 10:17
And so this optimal policy is going to tell us, given any state that we're in, what is the action that we should take in order to maximize the sum of the rewards that we'll get. 10:20
And so one question is how do we handle the randomness in the MDP, right? 10:29
We have randomness in terms of our initial state that we're sampling, in therms of this transition probability distribution that will give us distribution of our next states, and so on. 10:34
Also what we'll do is we'll work, then, with maximizing our expected sum of the rewards. 10:46
So, formally, we can write our optimal policy pi star as maximizing this expected sum of future rewards over policy's pi, where we have our initial state sampled from our state distribution. 10:51
We have our actions, sampled from our policy, given the state. 11:05
And then we have our next states sampled from our transition probability distributions. 11:09
Okay, so before we talk about exactly how we're going to find this policy, let's first talk about a few definitions that's going to be helpful for us in doing so. 11:16
So, specifically, the value function and the Q-value function. 11:26
So, as we follow the policy, we're going to sample trajectories or paths, right, for every episode. 11:31
And we're going to have our initial state as zero, a-zero, r-zero, s-one, a-one, r-one, and so on. 11:37
We're going to have this trajectory of states, actions, and rewards that we get. 11:43
And so, how good is a state that we're currently in? 11:49
Well, the value function at any state s, is the expected cumulative reward following the policy from state s, from here on out. 11:52
Right, so it's going to be expected value of our expected cumulative reward, starting from our current state. 12:01
And then how good is a state, action pair? 12:10
So how good is taking action a in state s? 12:13
And we define this using a Q-value function, which is, the expected cumulative reward from taking action a in state s and then following the policy. 12:17
Right, so then, the optimal Q-value function that we can get is going to be Q star, which is the maximum expected cumulative reward that we can get from a given state action pair, defined here. 12:29
So now we're going to see one important thing in reinforcement learning, which is called the Bellman equation. 12:45
So let's consider this a Q-value function from the optimal policy Q star, which is then going to satisfy this Bellman equation, which is this identity shown here, and what this means is that given any state, action pair, s and a, the value of this pair is going to be the reward that you're going to get, r, plus the value of whatever state that you end up in. 12:52
So, let's say, s prime. 13:16
And since we know that we have the optimal policy, then we also know that we're going to play the best action that we can, right, at our state s prime. 13:18
And so then, the value at state s prime is just going to be the maximum over our actions, a prime, of Q star at s prime, a prime. 13:28
And so then we get this identity here, for optimal Q-value. 13:38
Right, and then also, as always, we have this expectation here, because we have randomness over what state that we're going to end up in. 13:44
And then we can also infer, from here, that our optimal policy, right, is going to consist of taking the best action in any state, as specified by Q star. 13:54
Q star is going to tell us of the maximum future reward that we can get from any of our actions, so we should just take a policy that's following this and just taking the action that's going to lead to best reward. 14:02
Okay, so how can we solve for this optimal policy? 14:16
So, one way we can solve for this is something called a value iteration algorithm, where we're going to use this Bellman equation as an iterative update. 14:21
So at each step, we're going to refine our approximation of Q star by trying to enforce the Bellman equation. 14:29
And so, under some mathematical conditions, we also know that this sequence Q, i of our Q-function is going to converge to our optimal Q star as i approaches infinity. 14:39
And so this, this works well, but what's the problem with this? 14:54
Well, an important problem is that this is not scalable. 14:59
Right? 15:01
We have to compute Q of s, a here for every state, action pair in order to make our iterative updates. 15:02
Right, but then this is a problem if, for example, if we look at these the state of, for example, an Atari game that we had earlier, it's going to be your screen of pixels. 15:08
And this is a huge state space, and it's basically computationally infeasible to compute this for the entire state space. 15:18
Okay, so what's the solution to this? 15:28
Well, we can use a function approximator to estimate Q of s, a so, for example, a neural network, right. 15:31
So, we've seen before that any time, if we have some really complex function that don't know, that we want to estimate, a neural network is a good way to estimate this. 15:37
Okay, so this is going to take us to our formulation of Q-learning that we're going to look at. 15:48
And so, what we're going to do is we're going to use a function approximator in order to estimate our action value function. 15:54
Right? 16:02
And if this function approximator is a deep neural network, which is what's been used recently, then this is going to be called deep Q-learning. 16:02
And so this is something that you'll hear around as one of the common approaches to deep reinforcement learning that's in use. 16:10
Right, and so in this case, we also have our function parameters theta here, so our Q-value function is determined by these weights, theta, of our neural network. 16:20
Okay, so given this function approximation, how do we solve for our optimal policy? 16:33
So remember that we want to find a Q-function that's satisfying the Bellman equation. 16:37
Right, and so we want to enforce this Bellman equation to happen, so what we can do when we have this neural network approximating our Q-function is that we can train this where our loss function is going to try and minimize the error of our Bellman equation, right? 16:44
Or how far q of s, a is from its target, which is the Y_i here, the right hand side of the Bellman equation that we saw earlier. 17:00
So, we're basically going to take these forward passes of our loss function, trying to minimize this error and then our backward pass, our gradient update, is just going to be you just take the gradient of this loss, with respect to our network parameter's theta. 17:09
Right, and so our goal is again to have this effect as we're taking gradient steps of iteratively trying to make our Q-function closer to our target value. 17:28
So, any questions about this? 17:38
Okay. 17:42
So let's look at a case study of an example where one of the classic examples of deep reinforcement learning where this approach was applied. 17:44
And so we're going to look at this problem that we saw earlier of playing Atari games, where our objective was to complete the game with the highest score and remember our state is going to be the raw pixel inputs of the game state, and we can take these actions of moving left, right, up, down, or whatever actions of the particular game. 17:53
And our reward at each time step, we're going to get a reward of our score increase or decrease that we got at this time step, and so our cumulative total reward is this total reward that we'll usually see at the top of the screen. 18:12
Okay, so the network that we're going to use for our Q-function is going to look something like this, right, where we have our Q-network, with weight's theta. 18:27
And then our input, our state s, is going to be our current game screen. 18:37
And in practice we're going to take a stack of the last four frames, so we have some history. 18:43
And so we'll take these raw pixel values, we'll do some, you know, RGB to gray-scale conversions, some down-sampling, some cropping, so, some pre-processing. 18:49
And what we'll get out of this is this 84 by 84 by four stack of the last four frames. 18:58
Yeah, question. 19:04
[inaudible question from audience] Okay, so the question is, are we saying here that our network is going to approximate our Q-value function for different state, action pairs, for example, four of these? 19:05
Yeah, that's correct. 19:22
We'll see, we'll talk about that in a few slides. 19:24
[inaudible question from audience] So, no. 19:27
So, we don't have a Softmax layer after the connected, because here our goal is to directly predict our Q-value functions. 19:30
[inaudible question from audience] Q-values. 19:36
[inaudible question from audience] Yes, so it's more doing regression to our Q-values. 19:38
Okay, so we have our input to this network and then on top of this, we're going to have a couple of familiar convolutional layers, and a fully-connected layer, so here we have an eight-by-eight convolutions and we have some four-by-four convolutions. 19:44
Then we have a FC 256 layer, so this is just a standard kind of networK that you've seen before. 19:59
And then, finally, our last fully-connected layer has a vector of outputs, which is corresponding to your Q-value for each action, right, given the state that you've input. 20:05
And so, for example, if you have four actions, then here we have this four-dimensional output corresponding to Q of current s, as well as a-one, and then a-two, a-three, and a-four. 20:17
Right so this is going to be one scalar value for each of our actions. 20:28
And then the number of actions that we have can vary between, for example, 4 to 18, depending on the Atari game. 20:33
And one nice thing here is that using this network structure, a single feedforward pass is able to compute the Q-values for all functions from the current state. 20:43
And so this is really efficient. 20:54
Right, so basically we take our current state in and then because we have this output of an action for each, or Q-value for each action, as our output layer, we're able to do one pass and get all of these values out. 20:56
And then in order to train this, we're just going to use our loss function from before. 21:10
Remember, we're trying to enforce this Bellman equation and so, on our forward pass, our loss function we're going to try and iteratively make our Q-value close to our target value, that it should have. 21:15
And then our backward pass is just directly taking the gradient of this loss function that we have and then taking a gradient step based on that. 21:29
So one other thing that's used here that I want to mention is something called experience replay. 21:40
And so this addresses a problem with just using the plain two network that I just described, which is that learning from batches of consecutive samples is bad. 21:45
And so the reason because of this, right, is so for just playing the game, taking samples of state action rewards that we have and just taking consecutive samples of these and training with these, well all of these samples are correlated and so this leads to inefficient learning, first of all, and also, because of this, our current Q-network parameters, right, this determines the policy that we're going to follow, it determines our next samples that we're going to get that we're going to use for training. 21:58
And so this leads to problems where you can have bad feedback loops. 22:27
So, for example, if currently the maximizing action that's going to take left, well this is going to bias all of my upcoming training examples to be dominated by samples from the left-hand side. 22:30
And so this is a problem, right? 22:43
And so the way that we are going to address these problems is by using something called experience replay, where we're going to keep this replay memory table of transitions of state, as state, action, reward, next state, transitions that we have, and we're going to continuously update this table with new transitions that we're getting as game episodes are played, as we're getting more experience. 22:45
Right, and so now what we can do is that we can now train our Q-network on random, mini-batches of transitions from the replay memory. 23:08
Right, so instead of using consecutive samples, we're now going to sample across these transitions that we've accumulated random samples of these, and this breaks all of the, these correlation problems that we had earlier. 23:16
And then also, as another side benefit is that each of these transitions can also contribute to potentially multiple weight updates. 23:31
We're just sampling from this table and so we could sample one multiple times. 23:39
And so, this is going to lead also to greater data efficiency. 23:43
Okay, so let's put this all together and let's look at the full algorithm for deep Q-learning with experience replay. 23:50
So we're going to start off with initializing our replay memory to some capacity that we choose, N, and then we're also going to initialize our Q-network, just with our random weights or initial weights. 23:59
And then we're going to play M episodes, or full games. 24:14
This is going to be our training episodes. 24:18
And then what we're going to do is we're going to initialize our state, using the starting game screen pixels at the beginning of each episode. 24:21
And remember, we go through the pre-processing step to get to our actual input state. 24:31
And then for each time step of a game that we're currently playing, we're going to, with a small probability, select a random action, so one thing that's important in these algorithms is to have sufficient exploration, so we want to make sure that we are sampling different parts of the state space. 24:37
And then otherwise, we're going to select from the greedy action from the current policy. 24:58
Right, so most of the time we'll take the greedy action that we think is a good policy of the type of actions that we want to take and states that we want to see, and with a small probability we'll sample something random. 25:03
Okay, so then we'll take this action, a, t, and we'll observe the next reward and the next state. 25:16
So r, t and s, t plus one. 25:23
And then we'll take this and we'll store this transition in our replay memory that we're building up. 25:26
And then we're going to take, we're going to train a network a little bit. 25:32
So we're going to do experience replay and we'll take a sample of a random mini-batches of transitions that we have from the replay memory, and then we'll perform a gradient descent step on this. 25:35
Right, so this is going to be our full training loop. 25:47
We're going to be continuously playing this game and then also sampling minibatches, using experienced replay to update our weights of our Q-network and then continuing in this fashion. 25:49
Okay, so let's see. 26:03
Let's see if I can, is this playing? 26:05
Okay, so let's take a look at this deep Q-learning algorithm from Google DeepMind, trained on an Atari game of Breakout. 26:09
Alright, so it's saying here that our input is just going to be our state are raw game pixels. 26:20
And so here we're looking at what's happening at the beginning of training. 26:26
So we've just started training a bit. 26:29
And right, so it's going to look to it's learned to kind of hit the ball, but it's not doing a very good job of sustaining it. 26:31
But it is looking for the ball. 26:40
Okay, so now after some more training, it looks like a couple hours. 26:50
Okay, so now it's learning to do a pretty good job here. 27:00
So it's able to continuously follow this ball and be able to to remove most of the blocks. 27:06
Right, so after 240 minutes. 27:16
Okay, so here it's found the pro strategy, right? 27:33
You want to get all the way to the top and then have it go by itself. 27:36
Okay, so this is an example of using deep Q-learning in order to train an agent to be able to play Atari games. 27:41
It's able to do this on many Atari games and so you can check out some more of this online. 27:49
Okay, so we've talked about Q-learning. 27:56
But there is a problem with Q-learning, right? 27:58
It can be challenging and what's the problem? 28:01
Well, the problem can be that the Q-function is very complicated. 28:03
Right, so we have to, we're saying that we want to learn the value of every state action pair. 28:07
So, if, let's say you have something, for example, a robot grasping, wanting to grasp an object. 28:12
Right, you're going to have a really high dimensional state. 28:17
You have, I mean, let's say you have all of your even just joint, joint positions, and angles. 28:19
Right, and so learning the exact value of every state action pair that you have, right, can be really, really hard to do. 28:26
But on the other hand, your policy can be much simpler. 28:35
Right, like what you want this robot to do maybe just to have this simple motion of just closing your hand, right? 28:38
Just, move your fingers in this particular direction and keep going. 28:44
And so, that leads to the question of can we just learn this policy directly? 28:48
Right, is it possible, maybe, to just find the best policy from a collection of policies, without trying to go through this process of estimating your Q-value and then using that to infer your policy. 28:54
So, this is an approach that oh, so, okay, this is an approach that we're going to call policy gradients. 29:06
And so, formally, let's define a class of parametrized policies. 29:15
Parametrized by weights theta, and so for each policy let's define the value of the policy. 29:20
So, J, our value J, given parameters theta, is going to be, or expected some cumulative sum of future rewards that we care about. 29:27
So, the same reward that we've been using. 29:35
And so our goal then, under this setup is that we want to find an optimal policy, theta star, which is the maximum, right, arg max over theta of J of theta. 29:38
So we want to find the policy, the policy parameters that gives our best expected reward. 29:51
So, how can we do this? 29:56
Any ideas? 30:00
Okay, well, what we can do is just a gradient assent on our policy parameters, right? 30:04
We've learned that given some objective that we have, some parameters we can just use gradient asscent and gradient assent in order to continuously improve our parameters. 30:10
And so let's talk more specifically about how we can do this, which we're going to call here the reinforce algorithm. 30:23
So, mathematically, we can write out our expected future reward over trajectories, and so we're going to sample these trajectories of experience, right, like for example episodes of game play that we talked about earlier. 30:29
S-zero, a-zero, r-zero, s-one, a-one, r-one, and so on. 30:41
Using some policy pi of theta. 30:47
Right, and then so, for each trajectory we can compute a reward for that trajectory. 30:51
It's the cumulative reward that we got from following this trajectory. 30:57
And then the value of a policy, pi sub theta, is going to be just the expected reward of these trajectories that we can get from the following pi sub theta. 31:01
So that's here, this expectation over trajectories that we can get, sampling trajectories from our policy. 31:10
Okay. 31:18
So, we want to do gradient ascent, right? 31:19
So let's differentiate this. 31:21
Once we differentiate this, then we can just take gradient steps, like normal. 31:22
So, the problem is that now if we try and just differentiate this exactly, this is intractable, right? 31:28
So, the gradient of an expectation is problematic when p is dependent on theta here, because here we want to take this gradient of p of tau, given theta, but this is going to be, we want to take this integral over tau. 31:34
Right, so this is intractable. 31:50
However, we can use a trick here to get around this. 31:53
And this trick is taking this gradient that we want, of p. 31:57
We can rewrite this by just multiplying this by one, by multiplying top and bottom, both by p of tau given theta. 32:01
Right, and then if we look at these terms that we have now here, in the way that I've written this, on the left and the right, this is actually going to be equivalent to p of tau times our gradient with respect to theta, of log, of p. 32:10
Right, because the gradient of the log of p is just going to be one over p times gradient of p. 32:26
Okay, so if we then inject this back into our expression that we had earlier for this gradient, we can see that, what this will actually look like, right, because now we have a gradient of log p times our probabilities of all of these trajectories and then taking this integral here, over tau. 32:33
This is now going to be an expectation over our trajectories tau, and so what we've done here is that we've taken a gradient of an expectation and we've transformed it into an expectation of gradients. 32:52
Right, and so now we can use sample trajectories that we can get in order to estimate our gradient. 33:06
And so we do this using Monte Carlo sampling, and this is one of the core ideas of reinforce. 33:14
Okay, so looking at this expression that we want to compute, can we compute these quantities that we had here without knowing the transition probabilities? 33:23
Alright, so we have that p of tau is going to be the probability of a trajectory. 33:33
It's going to be the product of all of our transition probabilities of the next state that we get, given our current state and action as well as our probability of the actions that we've taken under our policy pi. 33:38
Right, so we're going to multiply all of these together, and get our probability of our trajectory. 33:52
So this log of p of tau that we want to compute is going to be we just take this log and this will separate this out into a sum of pushing the logs inside. 33:58
And then here, when we differentiate this, we can see we want to differentiate with respect to theta, but this first term that we have here, log p of the state transition probabilities there's no theta term here, and so the only place where we have theta is the second term that we have, of log of pi sub theta, of our action, given our state, and so this is the only term that we keep in our gradient estimate, and so we can see here that this doesn't depend on the transition probabilities, right, so we actually don't need to know our transition probabilities in order to computer our gradient estimate. 34:10
And then, so, therefore when we're sampling these, for any given trajectory tau, we can estimate J of theta using this gradient estimate. 34:47
This is here shown for a single trajectory from what we had earlier, and then we can also sample over multiple trajectories to get the expectation. 34:58
Okay, so given this gradient estimator that we've derived, the interpretation that we can make from this here, is that if our reward for a trajectory is high, if the reward that we got from taking the sequence of actions was good, then let's push up the probabilities of all the actions that we've seen. 35:09
Right, we're just going to say that these were good actions that we took. 35:29
And then if the reward is low, we want to push down these probabilities. 35:33
We want to say these were bad actions, let's try and not sample these so much. 35:37
Right and so we can see that's what's happening here, where we have pi of a, given s. 35:40
This is the likelihood of the actions that we've taken and then we're going to scale this, we're going to take the gradient and the gradient is going to tell us how much should we change the parameters in order to increase our likelihood of our action, a, right? 35:47
And then we're going to take this and scale it by how much reward we actually got from it, so how good were these actions, in reality. 36:03
Okay, so this might seem simplistic to say that, you know, if a trajectory is good, then we're saying here that all of its actions were good. 36:14
Right? 36:22
But, in expectation, this actually averages out. 36:23
So we have an unbiased estimator here, and so if you have many samples of this, then we will get an accurate estimate of our gradient. 36:26
And this is nice because we can just take gradient steps and we know that we're going to be improving our loss function and getting closer to, at least some local optimum of our policy parameters theta. 36:35
Alright, but there is a problem with this, and the problem is that this also suffers from high variance. 36:48
Because this credit assignment is really hard. 36:54
Right, we're saying that given a reward that we got, we're going to say all of the actions were good, we're just going to hope that this assignment of which actions were actually the best actions, that mattered, are going to average out over time. 36:57
And so this is really hard and we need a lot of samples in order to have a good estimate. 37:11
Alright, so this leads to the question of, is there anything that we can do to reduce the variance and improve the estimator? 37:17
And so variance reduction is an important area of research in policy gradients, and in coming up with ways in order to improve the estimator and require fewer samples. 37:26
Alright, so let's look at a couple of ideas of how we can do this. 37:39
So given our gradient estimator, so the first idea is that we can push up the probabilities of an action only by it's affect on future rewards from that state, right? 37:44
So, now with instead of scaling this likelihood, or pushing up this likelihood of this action by the total reward of its trajectory, let's look more specifically at just the sum of rewards coming from this time step on to the end, right? 37:57
And so, this is basically saying that how good an action is, is only specified by how much future reward it generates. 38:12
Which makes sense. 38:18
Okay, so a second idea that we can also use is using a discount factor in order to ignore delayed effects. 38:21
Alright so here we've added back in this discount factor, that we've seen before, which is saying that we are, you know, our discount factor's going to tell us how much we care about just the rewards that are coming up soon, versus rewards that came much later on. 38:29
Right, so we were going to now say how good or bad an action is, looking more at the local neighborhood of action set it generates in the immediate near future and down weighting the the ones that come later on. 38:47
Okay so these are some straightforward ideas that are generally used in practice. 39:00
So, a third idea is this idea of using a baseline in order to reduce your variance. 39:07
And so, a problem with just using the raw value of your trajectories, is that this isn't necessarily meaningful, right? 39:14
So, for example, if your rewards are all positive, then you're just going to keep pushing up the probabilities of all your actions. 39:23
And of course, you'll push them up to various degrees, but what's really important is whether a reward is better or worse than what you're expecting to be getting. 39:29
Alright, so in order to address this, we can introduce a baseline function that's dependent on the state. 39:39
Right, so this baseline function tell us what's, how much we, what's our guess and what we expect to get from this state, and then our reward or our scaling factor that we're going to use to be pushing up or down our probabilities, can now just be our expected sum of future rewards, minus this baseline, so now it's the relative of how much better or worse is the reward that we got from what we expected. 39:46
And so how can we choose this baseline? 40:11
Well, a very simple baseline, the most simple you can use, is just taking a moving average of rewards that you've experienced so far. 40:14
So you can even do this overall trajectories, and this is just an average of what rewards have I been seeing as I've been training, and as I've been playing these episodes? 40:23
Right, and so this gives some idea of whether the reward that I currently get was relatively better or worse. 40:34
And so there's some variance on this that you can use but so far the variance reductions that we've seen so far are all used in what's typically called "vanilla REINFORCE" algorithm. 40:42
Right, so looking at the cumulative future reward, having a discount factor, and some simple baselines. 40:54
Now let's talk about how we can think about this idea of baseline and potentially choose better baselines. 41:02
Right, so if we're going to think about what's a better baseline that we can choose, what we want to do is we want to push up the probability of an action from a state, if the action was better than the expected value of what we should get from that state. 41:08
So, thinking about the value of what we're going to expect from the state, what does this remind you of? 41:24
Does this remind you of anything that we talked about earlier in this lecture? 41:30
Yes. 41:37
[inaudible from audience] Yeah, so the value functions, right? 41:37
The value functions that we talked about with Q-learning. 41:41
So, exactly. 41:45
So Q-functions and value functions and so, the intuition is that well, we're happy with an action, taking an action in a state s, if our Q-value of taking a specific action from this state is larger than the value function or expected value of the cumulative future reward that we can get from this state. 41:46
Right, so this means that this action was better than other actions that we could've taken. 42:09
And on the contrary, we're unhappy if this action, if this value or this difference is negative or small. 42:14
Right, so now if we plug this in, in order to, as our scaling factor of how much we want to push up or down, our probabilities of our actions, then we can get this estimator here. 42:23
Right, so, it's going to be exactly the same as before, but now where we've had before our cumulative expected reward, with our various reduction, variance reduction techniques and baselines in, here we can just plug in now this difference of how much better our current action was, based on our Q-function minus our value function from that state. 42:34
Right, but what we talked about so far with our REINFORCE algorithm, we don't know what Q and V actually are. 43:01
So can we learn these? 43:09
And the answer is yes, using Q-learning. 43:11
What we've already talked about before. 43:14
So we can combine policy gradients while we've just been talking about, with Q-learning, by training both an actor, which is the policy, as well as a critic, right, a Q-function, which is going to tell us how good we think a state is, and an action in a state. 43:16
Right, so using this in approach, an actor is going to decide which action to take and then the critic, or Q-function, is going to tell the actor how good its action was and how it should adjust. 43:34
And so, and this also alleviates a little bit of the task of this critic compared to the Q-learning problems that we talked about earlier of having to have this learning a Q-value for every state, action pair, because here it only has to learn this for the state-action pairs that are generated by the policy. 43:47
It only needs to know this where it matters for computing this scaling factor. 44:04
Right, and then we can also, as we're learning this, incorporate all of the Q-learning tricks that we saw earlier, such as experience replay. 44:10
And so, now I'm also going to just define this term that we saw earlier, Q of s of a, how much, how good was an action in a given state, minus V of s? 44:18
Our expected value of how good the state is by this term advantage function. 44:32
Right, so the advantage function is how much advantage did we get from playing this action? 44:38
How much better the action was than expected. 44:43
So, using this, we can put together our full actor-critic algorithm. 44:48
And so what this looks like, is that we're going to start off with by initializing our policy parameters theta, and our critic parameters that we'll call phi. 44:53
And then for each, for iterations of training, we're going to sample M trajectories, under the current policy. 45:03
Right, we're going to play our policy and get these trajectories as s-zero, a-zero, r-zero, s-one and so on. 45:12
Okay, and then we're going to compute the gradients that we want. 45:18
Right, so for each of these trajectories and in each time step, we're going to compute this advantage function, and then we're going to use this advantage function, right? 45:21
And then we're going to use that in our gradient estimator that we showed earlier, and accumulate our gradient estimate that we have for here. 45:33
And then we're also going to train our critic parameters phi by exactly the same way, so as we saw earlier, basically trying to enforce this value function, right, to learn our value function, which is going to be pulled into, just minimizing this advantage function and this will encourage it to be closer to this Bellman equation that we saw earlier, right? 45:42
And so, this is basically just iterating between learning and optimizing our policy function, as well as our critic function. 46:10
And so then we're going to update the gradients and then we're going to go through and just continuously repeat this process. 46:20
Okay, so now let's look at some examples of REINFORCE in action, and let's look first here at something called the Recurrent Attention Model, which is something that, which is a model also referred to as hard attention, but you'll see a lot in, recently, in computer vision tasks for various purposes. 46:29
Right, and so the idea behind this is here, I've talked about the original work on hard attention, which is on image classification, and your goal is to still predict the image class, but now you're going to do this by taking a sequence of glimpses around the image. 46:49
You're going to look at local regions around the image and you're basically going to selectively focus on these parts and build up information as you're looking around. 47:06
Right, and so the reason that we want to do this is, well, first of all it has some nice inspiration from human perception in eye movement. 47:17
Let's say we're looking at a complex image and we want to determine what's in the image. 47:24
Well, you know, we might, maybe look at a low-resolution of it first, and then look specifically at parts of the image that will give us clues about what's in this image. 47:29
And then, this approach of just looking at, looking around at an image at local regions, is also going to help you save computational resources, right? 47:39
You don't need to process the full image. 47:50
In practice, what usually happens is you look at a low-resolution image first, of a full image, to decide how to get started, and then you look at high-res portions of the image after that. 47:53
And so this saves a lot of computational resources and you can think about, then, benefits of this to scalability, right, being able to, let's say process larger images more efficiently. 48:04
And then, finally, this could also actually help with actual classification performance, because now you're able to ignore clutter and irrelevant parts of the image. 48:16
Right? 48:24
Like, you know, instead of always putting through your ConvNet, all the parts of your image, you can use this to, maybe, first prune out what are the relevant parts that I actually want to process, using my ConvNet. 48:25
Okay, so what's the reinforcement learning formulation of this problem? 48:37
Well, our state is going to be the glimpses that we've seen so far, right? 48:41
Our what's the information that we've seen? 48:46
Our action is then going to be where to look next in the image. 48:51
Right, so in practice, this can be something like the x, y-coordinates, maybe centered around some fixed-sized glimpse that you want to look at next. 48:55
And then the reward for the classification problem is going to be one, at the final time step, if our image is correctly classified, and zero otherwise. 49:02
And so, because this glimpsing, taking these glimpses around the image is a non-differentiable operation, this is why we need to use reinforcement learning formulation, and learn policies for how to take these glimpse actions and we can train this using REINFORCE. 49:14
So, given the state of glimpses so far, the core of our model is going to be this RNN that we're going to use to model the state, and then we're going to use our policy parameters in order to output the next action. 49:31
Okay, so what this model looks like is we're going to take an input image. 49:49
Right, and then we're going to take a glimpse at this image. 49:54
So here, this glimpse is the red box here, and this is all blank, zeroes. 49:57
And so we'll pass what we see so far into some neural network, and this can be any kind of network depending on your task. 50:03
In the original experiments that I'm showing here, on MNIST, this is very simple, so you can just use a couple of small, fully-connected layers, but you can imagine for more complex images and other tasks you may want to use fancier ConvNets. 50:12
Right, so you've passed this into some neural network, and then, remember I said we're also going to be integrating our state of, glimpses that we've seen so far, using a recurrent network. 50:26
So, I'm just going to we'll see that later on, but this is going to go through that, and then it's going to output my x, y-coordinates, of where I'm going to see next. 50:36
And in practice, this is going to be We want to output a distribution over actions, right, and so, what this is going to be it's going to be a gaussian distribution and we're going to output the mean. 50:46
You can also output a mean and variance of this distribution in practice. 50:57
The variance can also be fixed. 51:00
Okay, so we're going to take this action that we're now going to sample a specific x, y location from our action distribution and then we're going to put this in to get the next, extract the next glimpse from our image. 51:03
Right, so here we've moved to the end of the two, this tail part of the two. 51:17
And so now we're actually starting to get some signal of what we want to see, right? 51:23
Like, what we want to do is we want to look at the relevant parts of the image that are useful for classification. 51:26
So we pass this through, again, our neural network layers, and then also through our recurrent network, right, that's taking this input as well as this previous hidden state, and we're going to use this to get a, so this is representing our policy, and then we're going to use this to output our distribution for the next location that we want to glimpse at. 51:32
So we can continue doing this, you can see in this next glimpse here, we've moved a little bit more toward the center of the two. 51:54
Alright, so it's probably learning that, you know, once I've seen this tail part of the two, that looks like this, maybe moving in this upper left-hand direction will get you more towards a center, which will also have a value, valuable information. 51:59
And then we can keep doing this. 52:14
And then finally, at the end, at our last time step, so we can have a fixed number of time steps here, in practice something like six or eight. 52:17
And then at the final time step, since we want to do classification, we'll have our standard Softmax layer that will produce a distribution of probabilities for each class. 52:26
And then here the max class was a two, so we can predict that this was a two. 52:39
Right, and so this is going to be the set up of our model and our policy, and then we have our estimate for the gradient of this policy that we've said earlier we could compute by taking trajectories from here and using those to do back prop. 52:44
And so we can just do this in order to train this model and learn the parameters of our policy, right? 52:59
All of the weights that you can see here. 53:05
Okay, so here's an example of a policies trained on MNIST, and so you can see that, in general, from wherever it's starting, usually learns to go closer to where the digit is, and then looking at the relevant parts of the digit, right? 53:09
So this is pretty cool and this you know, follows kind of what you would expect, right, if you were to choose places to look next in order to most efficiently determine what digit this is. 53:25
Right, and so this idea of hard attention, of recurrent attention models, has also been used in a lot of tasks in computer vision in the last couple of years, so you'll see this, used, for example, fine-grained image recognition. 53:40
So, I mentioned earlier that one of the useful benefits of this can be also to both save on computational efficiency as well as to ignore clutter and irrelevant parts of the image, and when you have fine-grained image classification problems, you usually want both of these. 53:54
You want to keep high-resolution, so that you can look at, you know, important differences. 54:13
And then you also want to focus on these differences and ignore irrelevant parts. 54:19
Yeah, question. 54:25
[inaudible question from audience] Okay, so yeah, so the question is how is there is computational efficiency, because we also have this recurrent neural network in place. 54:27
So that's true, it depends on exactly what's your, what is your problem, what is your network, and so on, but you can imagine that if you had some really hi- resolution image and you don't want to process the entire parts of this image with some huge ConvNet or some huge, you know, network, now you can get some savings by just focusing on specific smaller parts of the image. 54:41
You only process those parts of the image. 55:04
But, you're right, that it depends on exactly what problem set-up you have. 55:06
This has also been used in image captioning, so if we're going to produce an caption for an image, we can choose, you know, we can have the image use this attention model to generate this caption and what it usually ends up learning is these policies where it'll focus on specific parts of the image, in sequence, and as it focuses on each part, it'll generate some words or the part of the caption referring to that part of the image. 55:12
And then it's also been used, also tasks such as visual question answering, where we ask a question about the image and you want the model to output some answer to your question, for example, I don't know, how many chairs are around the table? 55:38
And so you can see how this attention mechanism might be a good type of model for learning how to answer these questions. 55:53
Okay, so that was an example of policy gradients in these hard attention models. 56:05
And so, now I'm going to talk about one more example, that also uses policy gradients, which is learning how to play Go. 56:10
Right, so DeepMind had this agent for playing Go, called AlphGo, that's been in the news a lot in the past, last year and this year. 56:18
So, sorry? 56:30
[inaudible comment from audience] And yesterday, yes, that's correct. 56:31
So this is very exciting, recent news as well. 56:36
So last year, a first version of AlphaGo was put into a competition against one of the best Go players of recent years, Lee Sedol, and the agent was able to beat him four to one, in a game of five matches. 56:39
And actually, right now, just there's another match with Ke Jie, which is current world number one, and so it's best of three in China right now. 56:57
And so the first game was yesterday. 57:09
AlphaGo won. 57:12
I think it was by just half a point, and so, so there's two more games to watch. 57:13
These are all live-stream, so you guys, should also go online and watch these games. 57:18
It's pretty interesting to hear the commentary. 57:24
But, so what is this AlphaGo agent, right, from DeepMind? 57:29
And it's based on a lot of what we've talked about so far in this lecture. 57:32
And what it is it's a mixed of supervised learning and reinforcement learning, as well as a mix of some older methods for Go, Monte Carlo Tree Search, as well as recent deep RL approaches. 57:36
So, okay, so how does AlphaGo beat the Go world champion? 57:52
Well, what it first does is to train AlphaGo, what it takes as input is going to be a few featurization of the board. 57:56
So it's basically, right, your board and the positions of the pieces on the board. 58:04
That's your natural state representation. 58:08
And what they do in order to improve performance a little bit is that they featurize this into some more channels of one is all the different stone colors, so this is kind of like your configuration of your board. 58:10
Also some channels, for example, where, which moves are legal, some bias channels, some various things and then, given this state, right, it's going to first train a network that's initialized with supervised training from professional Go games. 58:23
So, given the current board configuration or features, featurization of this, what's the correct next action to take? 58:40
Alright, so given examples of professional games played, you know, just collected over time, we can just take all of these professional Go moves, train a standard, supervised mapping, from board state to action to take. 58:48
Alright, so they take this, which is a pretty good start, and then they're going to use this to initialize a policy network. 59:02
Right, so policy network, it's just going to take the exact same structure of input is your board state and your output is the actions that you're going to take. 59:09
And this was the set-up for the policy gradients that we just saw, right? 59:17
So now we're going to just continue training this using policy gradients. 59:21
And it's going to do this reinforcement learning training by playing against itself for random, previous iterations. 59:27
So self play, and the reward it's going to get is one, if it wins, and a negative one if it loses. 59:35
And what we're also going to do is we're also going to learn a value network, so, something like a critic. 59:42
And then, the final AlphaGo is going to be combining all of these together, so policy and value networks as well as with a Monte Carlo Tree Search algorithm, in order to select actions by look ahead search. 59:47
Right, so after putting all this together, a value of a node, of where you are in play, and what you do next, is going to be a combination of your value function, as well as roll at outcome that you're computing from standard Monte Carlo Tree Search roll outs. 60:01
Okay, so, yeah, so this is basically the various, the components of AlphaGo. 60:19
If you're interested in reading more about this, there's a nature paper about this in 2016, and they trained this, I think, over, the version of AlphaGo that's being used in these matches is, like, I think a couple thousand CPUs plus a couple hundred GPUs, putting all of this together, so it's a huge amount of training that's going on, right. 60:28
And yeah, so you guys should, follow the game this week. 60:55
It's pretty exciting. 61:01
Okay, so in summary, today we've talked about policy gradients, right, which are general. 61:03
They, you're just directly taking gradient descent or ascent on your policy parameters, so this works well for a large class of problems, but it also suffers from high variance, so it requires a lot of samples, and your challenge here is sample efficiency. 61:10
We also talked about Q-learning, which doesn't always work, it's harder to sometimes get it to work because of this problem that we talked earlier where you are trying to compute this exact state, action value for many, for very high dimensions, but when it does work, for problems, for example, the Atari we saw earlier, then it's usually more sample efficient than policy gradients. 61:28
Right, and one of the challenges in Q-learning is that you want to make sure that you're doing sufficient exploration. 61:54
Yeah? 61:59
[inaudible question from audience] Oh, so for Q-learning can you do this process where you're, okay, where you're trying to start this off by some supervised training? 62:00
So, I guess the direct approach for Q-learning doesn't do that because you're trying to regress to these Q-values, right, instead of policy gradients over this distribution, but I think there are ways in which you can, like, massage this type of thing to also bootstrap. 62:21
Because I think bootstrapping in general or like behavior cloning is a good way to warm start these policies. 62:37
Okay, so, right, so we've talked about policy gradients and Q-learning, and just another look at some of these, some of the guarantees that you have, right, with policy gradients. 62:47
One thing we do know that's really nice is that this will always converge to a local minimum of J of theta, because we're just directly doing gradient ascent, and so this is often, and this local minimum is often just pretty good, right. 62:56
And in Q-learning, on the other hand, we don't have any guarantees because here we're trying to approximate this Bellman equation with a complicated function approximator and so, in this case, this is the problem with Q-learning being a little bit trickier to train in terms of applicability to a wide range of problems. 63:12
Alright, so today you got basically very, brief, kind of high-level overview of reinforcement learning and some major classes of algorithms in RL. 63:31
And next time we're going to have a guest lecturer from, Song Han, who's done a lot of pioneering work in model compression and energy efficient deep learning, and so he's going to talk some of this, about some of this. 63:41
Thank you. 63:56
